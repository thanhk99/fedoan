import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { FriendService } from '../service/friend.service';
import { map, forkJoin, lastValueFrom } from 'rxjs';
import { userService } from '../service/users.service';
import { HttpClient, HttpHeaders} from '@angular/common/http';
import { environment } from '../../environments/environment';

@Component({
  selector: 'app-friend',
  imports: [CommonModule, FormsModule ],
  templateUrl: './friend.component.html',
  styleUrl: './friend.component.css',
})

export class FriendComponent {
  [x: string]: any;
  showFriendsList = false; // Bi·∫øn ki·ªÉm so√°t hi·ªÉn th·ªã danh s√°ch b·∫°n b√®
  showFriendRequest = false; // Bi·∫øn ki·ªÉm so√°t hi·ªÉn th·ªã danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
  searchQuery = ''; // Bi·∫øn l∆∞u tr·ªØ t·ª´ kh√≥a t√¨m ki·∫øm
  showSearchResults = false; // Bi·∫øn ki·ªÉm so√°t hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm ng∆∞·ªùi k·∫øt b·∫°n
  searchResults: { id: number; fullname: string }[] = []; // Danh s√°ch k·∫øt qu·∫£ t√¨m ki·∫øm ng∆∞·ªùi k·∫øt b·∫°n

<<<<<<< HEAD

  friends: { idFriend: number; name: string }[] = []; // Danh s√°ch b·∫°n b√®
  friendRequests : { id: number; name: string }[] = []; // Danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
=======
  friends: string[] = []; // Danh s√°ch b·∫°n b√®
  friendRequests: { name: string }[] = []; // Danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
>>>>>>> 1a11d705946f6ac9dd81a452bf2a2245108e7da1
  btn_add = 'Th√™m b·∫°n b√®';
  apiAddFriend = environment.apiaddFriend;

<<<<<<< HEAD
  constructor(private friendService: FriendService , 
    private userService: userService,
    private http: HttpClient,) { }
=======
  constructor(
    private friendService: FriendService,
    private userService: userService
  ) {}
>>>>>>> 1a11d705946f6ac9dd81a452bf2a2245108e7da1

  ngOnInit() {
    this['loadFriends']();
  }



  loadFriends() {
<<<<<<< HEAD
    this.friendService.getFriends().subscribe(
      (data: any[]) => {
        this.friends = data; // L∆∞u c·∫£ id v√† name
        console.log('Danh s√°ch b·∫°n b√®:', this.friends); // Ki·ªÉm tra trong console
=======
    this.friendService.getListFriends().subscribe(
      (data) => {
        this.friends = data;
>>>>>>> 1a11d705946f6ac9dd81a452bf2a2245108e7da1
      },
      (error) => {
        console.error('L·ªói khi t·∫£i danh s√°ch b·∫°n b√®:', error);
      }
    );
  }

  showListFriend() {
    this.showFriendsList = true;
    this.showFriendRequest = false; // ·∫®n danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
  }

  displayFriendRequests(): void {
    this.showFriendsList = false;
    this.showFriendRequest = true;

    const idMy = this.userService.getCookies(); // L·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i

    this.friendService.getFriendRequets().subscribe({
<<<<<<< HEAD
        next: (response: any) => {
            if (Array.isArray(response)) {
                this.friendRequests = response.map(item => ({
                    id: item.id,     // ID c·ªßa ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi
                    name: item.name  // T√™n c·ªßa ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi
                }));
                console.log("Danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n:", this.friendRequests);
            } else {
                console.warn("Ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", response);
                alert("D·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá!");
            }
        },
        error: (error: any) => {
            console.error("L·ªói khi l·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n:", error);
            
            if (error.status === 404) {
                alert("Kh√¥ng c√≥ l·ªùi m·ªùi k·∫øt b·∫°n n√†o.");
                this.friendRequests = []; // ƒê·∫∑t danh s√°ch tr·ªëng
            } else {
                alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n! Vui l√≤ng th·ª≠ l·∫°i sau.");
            }
        }
    });
}



// t√¨m ki·∫øm 

searchFriends() {
  this.showFriendsList = false;
  this.showFriendRequest = false;
  this.showSearchResults = true;

  const query = (this.searchQuery || "").trim(); // Kh√¥ng chuy·ªÉn ƒë·ªïi v·ªÅ ch·ªØ th∆∞·ªùng
  if (!query) {
      this.searchResults = [];
      return;
  }

  // T·∫°o bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng
  const regex = new RegExp(query, 'i'); // 'i' ƒë·ªÉ kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng

  this.userService.getFullname(query).subscribe({
      next: (users: any[]) => {
          console.log("D·ªØ li·ªáu t·ª´ API:", users);

          if (!Array.isArray(users)) {
              console.error("API kh√¥ng tr·∫£ v·ªÅ danh s√°ch h·ª£p l·ªá:", users);
              this.searchResults = [];
              return;
          }

          this.searchResults = users.filter(user => {
              if (!user || typeof user.fullname !== "string") {
                  console.warn("B·ªè qua d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:", user);
                  return false;
              }
              return regex.test(user.fullname); // S·ª≠ d·ª•ng bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ ki·ªÉm tra
          });

          console.log("Danh s√°ch t√¨m ki·∫øm (c√≥ id & fullname):", this.searchResults);
      },
      error: (error: any) => {
          console.error("L·ªói khi t√¨m ki·∫øm b·∫°n b√®:", error);
          this.searchResults = [];
      }
  });
}


=======
      next: (response: string[]) => {
        this.friendRequests = response.map((name) => ({ name })); // L∆∞u danh s√°ch t√™n b·∫°n b√®
        console.log('Danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n:', this.friendRequests);
      },
      error: (error: any) => {
        console.error('L·ªói khi l·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n:', error);
        alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n!');
      },
    });
  }

  searchFriends() {
    this.showFriendsList = false;
    this.showFriendRequest = false;
    this.showSearchResults = true;

    const query = this.searchQuery.trim().toLowerCase();
    if (!query) {
      this.searchResults = [];
      return;
    }

    // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch fullname
    this.userService.getFullname(query).subscribe({
      next: (fullNames: string[]) => {
        this.searchResults =
          fullNames.length > 0
            ? fullNames.filter((name) => name.toLowerCase().includes(query))
            : [];

        if (this.searchResults.length === 0) {
          console.warn('Kh√¥ng t√¨m th·∫•y fullname n√†o t·ª´ API.');
        }
      },
      error: (error: any) => {
        console.error('L·ªói khi t√¨m ki·∫øm b·∫°n b√®:', error);
        this.searchResults = [];
      },
    });
  }

>>>>>>> 1a11d705946f6ac9dd81a452bf2a2245108e7da1
  sendMessage(friend: string) {
    alert(`Nh·∫Øn tin v·ªõi ${friend}`);
  }


  async removeFriend(friend: { id: number; name: string }) {
    try {
      // L·∫•y ID b·∫°n b√® t·ª´ d·ªãch v·ª• ho·∫∑c t·ª´ tham s·ªë
      const friendId = friend.id;
  
      // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ cookie
      const idMy = Number(this.userService.getCookies());
    
      console.log(`üõ† Debug: ID ng∆∞·ªùi d√πng: ${idMy}, ID b·∫°n b√®: ${friendId}`);
      
  
      // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
      const confirmDelete = confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${friend.name}?`);
      if (!confirmDelete) return;
  
      // G·ªçi API x√≥a b·∫°n b√®
      const result = await lastValueFrom(this.friendService.deleteFriend(idMy, friendId));
  
      if (result.status === 'success') {
        // X√≥a kh·ªèi danh s√°ch hi·ªÉn th·ªã
        this.friends = this.friends.filter(f => f.idFriend !== friendId);
        alert(`‚úÖ ${result.message}`);
      } else {
        alert(`‚ùå L·ªói: ${result.message}`);
      }
    } catch (error) {
      console.error('L·ªói khi x√≥a b·∫°n b√®:', error);
      alert('‚ùå X√≥a b·∫°n b√® th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i');
    }
  }
<<<<<<< HEAD
  
  

  
  // th√™m b·∫°n b√®
  addFriend(friendId: number) {
    if (!friendId) {
        console.error("L·ªói: ID b·∫°n b√® kh√¥ng h·ª£p l·ªá", friendId);
        alert("Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n. ID kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const idMy = this.userService.getCookies(); // L·∫•y ID ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi

    if (!idMy) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!");
        return;
    }

    // Debug d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
    console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n API:", { idMy, idFriend: friendId });

    this.http.post(
        this.apiAddFriend, // ƒê·∫£m b·∫£o API ƒë√∫ng
        { idMy, idFriend: friendId },
    ).subscribe({
        next: (response: any) => {
            console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ API:", response);
            

            if (response?.success) {
                this.btn_add = 'ƒê√£ g·ª≠i'; // C·∫≠p nh·∫≠t UI
                // alert("ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!");
            } else {
                alert(response?.message || "G·ª≠i l·ªùi m·ªùi th·∫•t b·∫°i!");
            }
        },
        error: (error: any) => {
            console.error("‚ùå L·ªói khi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:", error);

            if (error.status === 400) {
                alert("L·ªói 400: Ki·ªÉm tra l·∫°i d·ªØ li·ªáu g·ª≠i l√™n!");
            } else if (error.status === 403) {
                alert("L·ªói b·∫£o m·∫≠t: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
                window.location.reload();
            } else {
                alert(error.error?.message || "C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªùi m·ªùi!");
            }
        }
    });
}


acpRequests(request: { id: number; name: string }) {
    const idFriend = request.id; // ID c·ªßa ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi

    if (!idFriend) {
        console.error("ID ng∆∞·ªùi g·ª≠i kh√¥ng h·ª£p l·ªá:", idFriend);
        alert("ID ng∆∞·ªùi g·ª≠i kh√¥ng h·ª£p l·ªá!");
        return;
    }

    // Gi·∫£ s·ª≠ b·∫°n ƒë√£ l∆∞u ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i trong localStorage ho·∫∑c bi·∫øn kh√°c
    const idMy = Number(this.userService.getCookies()); // Ho·∫∑c c√°ch l·∫•y ID kh√°c

    if (!idMy) {
        console.error("Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i");
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
    }

    // G·ª≠i y√™u c·∫ßu ch·∫•p nh·∫≠n k·∫øt b·∫°n
    this.friendService.acceptFriend(idMy, idFriend).subscribe({
        next: (response: any) => {
            console.log("K·∫øt qu·∫£ ch·∫•p nh·∫≠n:", response);
            this.friends.push({ idFriend: idFriend, name: request.name });
            this.friendRequests = this.friendRequests.filter(r => r.id !== idFriend);
            alert(`ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi t·ª´ ${request.name}`);
        },
        error: (error: any) => {
            console.error("L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi:", error);
            alert("Ch·∫•p nh·∫≠n l·ªùi m·ªùi th·∫•t b·∫°i!");
        }
    });
}
  


deleteFR(request: { id: number; name: string }) {
    const idFriend = Number(this.userService.getCookies());
    const idMy = request.id;

    console.log(` Debug: ID ng∆∞·ªùi d√πng: ${idMy}, ID b·∫°n b√®: ${idFriend}`);

    if (!idMy || isNaN(idMy)) {
        console.error("L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng.");
        alert("L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        return;
    }

    if (!idFriend || isNaN(idFriend)) {
        console.error("L·ªói: ID b·∫°n b√® kh√¥ng h·ª£p l·ªá.");
        alert("L·ªói: ID b·∫°n b√® kh√¥ng h·ª£p l·ªá. Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu k·∫øt b·∫°n n√†y.");
        return;
    }

    this.friendService.deleteFriendRequests(idMy, idFriend).subscribe({
        next: (response) => {
            console.log("‚úÖ X√≥a th√†nh c√¥ng:", response);
            this.friendRequests = this.friendRequests.filter(r => r.id !== idFriend);
            alert(`ƒê√£ x√≥a y√™u c·∫ßu t·ª´ ${request.name}`);
            this.displayFriendRequests();
        },
        error: (error) => {
            console.error("‚ùå L·ªói khi x√≥a:", error);
            if (error.status === 400 && error.error && error.error.message) {
                alert(`L·ªói: ${error.error.message}`); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói t·ª´ API
            } else if (error.status === 404) {
                alert("L·ªói: Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu k·∫øt b·∫°n.");
            } else {
                alert("L·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i!");
            }
            // Th√™m logging chi ti·∫øt ƒë·ªÉ g·ª° l·ªói
            console.log("Chi ti·∫øt l·ªói:", error);
        }
    });
}  
=======

  addFriend(friend: string) {
    const idMy = this.userService.getCookies(); // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i

    this.userService.getUser().subscribe((user) => {
      const idFriend = user.id; // L·∫•y ID c·ªßa b·∫°n b√® t·ª´ API getUser()

      this['http'].post(this['apiaddFriend'], { idMy, idFriend }).subscribe({
        next: (response: any) => {
          console.log('K·∫øt qu·∫£ g·ª≠i l·ªùi m·ªùi:', response);
          this.btn_add = 'H·ªßy l·ªùi m·ªùi';
          alert('ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!');
        },
        error: (error: any) => {
          console.error('L·ªói khi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:', error);
          if (error.status === 400) {
            alert('Hai b·∫°n ƒë√£ l√† b·∫°n b√®!');
          } else {
            alert('G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th·∫•t b·∫°i!');
          }
        },
      });
    });
  }
  acpRequests(request: any) {
    this.userService.getUser().subscribe((user) => {
      const idMy = user.id; // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
      const idFriend = request.id; // ID c·ªßa ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi

      this['http'].post(this['apiacceptFriend'], { idMy, idFriend }).subscribe({
        next: (response: any) => {
          console.log('K·∫øt qu·∫£ ch·∫•p nh·∫≠n:', response);
          this.friends.push(request.name); // Th√™m v√†o danh s√°ch b·∫°n b√®
          this.friendRequests = this.friendRequests.filter(
            (r) => r !== request
          ); // X√≥a kh·ªèi danh s√°ch y√™u c·∫ßu
          alert(`B·∫°n ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ${request.name}`);
        },
        error: (error: any) => {
          console.error('L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi:', error);
          alert('Ch·∫•p nh·∫≠n l·ªùi m·ªùi th·∫•t b·∫°i!');
        },
      });
    });
  }

  deleteFriendRequets(request: any) {
    let id = this.userService.getCookies();
    this.userService.getUser().subscribe((user) => {
      const idMy = user.id; // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
      const idFriend = request.id; // ID c·ªßa ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi

      this['http']
        .delete(`${this['apideleFriend']}/${idMy}/${idFriend}`)
        .subscribe({
          next: (response: any) => {
            console.log('K·∫øt qu·∫£ x√≥a b·∫°n:', response);
            this.friendRequests = this.friendRequests.filter(
              (r) => r !== request
            ); // X√≥a kh·ªèi danh s√°ch y√™u c·∫ßu
            alert(`B·∫°n ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ${request.name}`);
          },
          error: (error: any) => {
            console.error('L·ªói khi x√≥a b·∫°n:', error);
            alert('T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n th·∫•t b·∫°i!');
          },
        });
    });
  }
>>>>>>> 1a11d705946f6ac9dd81a452bf2a2245108e7da1
}
