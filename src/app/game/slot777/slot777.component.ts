import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ElementRef, ViewChild, AfterViewInit } from '@angular/core';

@Component({
  selector: 'app-slot777',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './slot777.component.html',
  styleUrl: './slot777.component.css'
})
export class Slot777Component {
  @ViewChild('slotCanvas', { static: false }) canvasRef!: ElementRef<HTMLCanvasElement>;
  private ctx!: CanvasRenderingContext2D;

  // K√≠ch th∆∞·ªõc canvas
  canvasWidth = 500;
  canvasHeight = 300;

  // S·ªë c·ªôt (reels) v√† s·ªë h√†ng (rows)
  numReels = 5;
  numRows = 3;

  symbols= [
    '7red.png',
    '7blue.png',
    '7green.png',
    '7purple.jpg',
    'bar.png'
  ];
  images: HTMLImageElement[] = [];

  // T·ªça ƒë·ªô c·ªßa c√°c cu·ªôn
  reels: { y: number; speed: number }[] = [];

  constructor() {}

  ngAfterViewInit() {
    const canvas = this.canvasRef.nativeElement;
    this.ctx = canvas.getContext('2d')!;
    canvas.width = this.canvasWidth;
    canvas.height = this.canvasHeight;

    // T·∫£i ·∫£nh v√† kh·ªüi t·∫°o game
    this.loadImages().then(() => {
      this.initReels();
      this.draw();
    });
  }

  // T·∫£i ·∫£nh v√†o b·ªô nh·ªõ tr∆∞·ªõc khi hi·ªÉn th·ªã
  async loadImages() {
    const promises = this.symbols.map(src => this.loadImage(`${src}`));
    this.images = await Promise.all(promises);
    console.log("‚úÖ ·∫¢nh ƒë√£ t·∫£i xong!", this.images);
    
    this.initReels();
    this.draw(); //  G·ªçi l·∫°i h√†m v·∫Ω
  }

  // T·∫°o cu·ªôn v·ªõi v·ªã tr√≠ v√† t·ªëc ƒë·ªô ng·∫´u nhi√™n
  initReels() {
    for (let i = 0; i < this.numReels; i++) {
      this.reels.push({ y: Math.random() * -200, speed: 0 });
    }
  }

  // H√†m t·∫£i ·∫£nh
  loadImage(src: string): Promise<HTMLImageElement> {
    return new Promise((resolve) => {
      const img = new Image();
      img.src = src;
      img.onload = () => resolve(img);
    });
  }

  // H√†m v·∫Ω slot machine
  draw() {
    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);

    const reelWidth = this.canvasWidth / this.numReels;
    const symbolHeight = this.canvasHeight / this.numRows;

    // console.log("üñåÔ∏è Drawing slot machine...");

    for (let i = 0; i < this.numReels; i++) {
        const reel = this.reels[i];
        // console.log(`üé∞ Reel ${i} - Y: ${reel.y}, Speed: ${reel.speed}`);

        for (let j = 0; j < this.numRows + 1; j++) {
            // C·∫≠p nh·∫≠t c√°ch ch·ªçn ·∫£nh: ch·ªçn ng·∫´u nhi√™n thay v√¨ d·ª±a v√†o v·ªã tr√≠ `y`
            let symbolIndex = (Math.floor(reel.y / symbolHeight) + j) % this.images.length;

            // N·∫øu reel ƒëang quay, random ·∫£nh
            if (reel.speed > 0) {
                symbolIndex = Math.floor(Math.random() * this.images.length);
            }

            if (symbolIndex < 0 || symbolIndex >= this.images.length) {
                // console.warn(`‚ö†Ô∏è Invalid symbolIndex (${symbolIndex}), setting to 0`);
                symbolIndex = 0;
            }

            const img = this.images[symbolIndex];
            // console.log(`üñºÔ∏è Reel ${i}, Row ${j}: Drawing image index ${symbolIndex}`);

            const aspectRatio = img.width / img.height;
            let drawWidth = reelWidth;
            let drawHeight = drawWidth / aspectRatio;

            this.ctx.drawImage(img, i * reelWidth, reel.y + j * symbolHeight, drawWidth, drawHeight);
        }

        // C·∫≠p nh·∫≠t v·ªã tr√≠ quay
        if (reel.speed > 0) {
            reel.y += reel.speed;
            if (reel.y >= symbolHeight) {
                // console.log(`üîÑ Resetting reel ${i}`);
                reel.y = -symbolHeight * (this.numRows - 1);
            }
        }
    }

    requestAnimationFrame(() => this.draw()); // V·∫Ω li√™n t·ª•c
  }

  // Khi nh·∫•n "SPIN"
  spin() {
    console.log("üîÑ ƒêang quay slot:", this.reels);
    this.reels.forEach((reel, index) => {
      reel.speed = 10 + Math.random() * 5; // T·ªëc ƒë·ªô ng·∫´u nhi√™n
      setTimeout(() => this.stopReel(index), 3000 + index * 500); // D·ª´ng t·ª´ng cu·ªôn m·ªôt
    });
  }

  // Khi d·ª´ng t·ª´ng cu·ªôn
  stopReel(index: number) {
    let stopInterval = setInterval(() => {
        this.reels[index].speed *= 0.9; // Gi·∫£m t·ªëc ƒë·ªô t·ª´ t·ª´

        if (this.reels[index].speed < 0.5) {
            this.reels[index].speed = 0; // D·ª´ng h·∫≥n

            // üé≤ CƒÉn ch·ªânh ·∫£nh m·ªôt c√°ch ng·∫´u nhi√™n ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt qu·∫£ kh√°c nhau
            const symbolHeight = this.canvasHeight / this.numRows;
            this.reels[index].y = -Math.floor(Math.random() * this.images.length) * symbolHeight;

            clearInterval(stopInterval);
        }
    }, 50);
}

}
